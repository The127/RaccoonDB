//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/julia/RiderProjects/RaccoonDB/RaccoonDB\RaccoonSQL.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class RaccoonSQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, Identifier=30, LINE_COMMENT=31, 
		WS=32;
	public const int
		RULE_query = 0, RULE_createQuery = 1, RULE_ifNotExists = 2, RULE_dropQuery = 3, 
		RULE_ifExists = 4, RULE_alterQuery = 5, RULE_explainQuery = 6, RULE_explainColumnsOnTable = 7, 
		RULE_explainIndicesOnTable = 8, RULE_truncateQuery = 9, RULE_createIndex = 10, 
		RULE_index = 11, RULE_indexColumn = 12, RULE_createTable = 13, RULE_table = 14, 
		RULE_tableColumns = 15, RULE_tableColumn = 16, RULE_columnConstraint = 17, 
		RULE_autoValue = 18, RULE_notNullConstraint = 19, RULE_uniqueConstraint = 20, 
		RULE_primaryKeyConstraint = 21, RULE_foreignKeyConstraint = 22, RULE_addColumn = 23, 
		RULE_dropColumn = 24, RULE_alterColumn = 25, RULE_selectQuery = 26, RULE_updateQuery = 27, 
		RULE_deleteQuery = 28, RULE_insertQuery = 29;
	public static readonly string[] ruleNames = {
		"query", "createQuery", "ifNotExists", "dropQuery", "ifExists", "alterQuery", 
		"explainQuery", "explainColumnsOnTable", "explainIndicesOnTable", "truncateQuery", 
		"createIndex", "index", "indexColumn", "createTable", "table", "tableColumns", 
		"tableColumn", "columnConstraint", "autoValue", "notNullConstraint", "uniqueConstraint", 
		"primaryKeyConstraint", "foreignKeyConstraint", "addColumn", "dropColumn", 
		"alterColumn", "selectQuery", "updateQuery", "deleteQuery", "insertQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create'", "'if'", "'not'", "'exists'", "'drop'", "'alter'", "'explain'", 
		"'columns'", "'on'", "'indices'", "'truncate'", "'('", "')'", "'index'", 
		"'table'", "','", "'auto'", "'null'", "'unique'", "'primary'", "'key'", 
		"'foreign'", "'references'", "'add'", "'select'", "'update'", "'delete'", 
		"'insert'", "'into'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "Identifier", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RaccoonSQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RaccoonSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RaccoonSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RaccoonSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateQueryContext createQuery() {
			return GetRuleContext<CreateQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropQueryContext dropQuery() {
			return GetRuleContext<DropQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterQueryContext alterQuery() {
			return GetRuleContext<AlterQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainQueryContext explainQuery() {
			return GetRuleContext<ExplainQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateQueryContext truncateQuery() {
			return GetRuleContext<TruncateQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryContext selectQuery() {
			return GetRuleContext<SelectQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateQueryContext updateQuery() {
			return GetRuleContext<UpdateQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteQueryContext deleteQuery() {
			return GetRuleContext<DeleteQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryContext insertQuery() {
			return GetRuleContext<InsertQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 60;
				createQuery();
				}
				break;
			case T__4:
				{
				State = 61;
				dropQuery();
				}
				break;
			case T__5:
				{
				State = 62;
				alterQuery();
				}
				break;
			case T__6:
				{
				State = 63;
				explainQuery();
				}
				break;
			case T__10:
				{
				State = 64;
				truncateQuery();
				}
				break;
			case T__24:
				{
				State = 65;
				selectQuery();
				}
				break;
			case T__25:
				{
				State = 66;
				updateQuery();
				}
				break;
			case T__26:
				{
				State = 67;
				deleteQuery();
				}
				break;
			case T__27:
				{
				State = 68;
				insertQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterCreateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitCreateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateQueryContext createQuery() {
		CreateQueryContext _localctx = new CreateQueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_createQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__0);
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
			case T__18:
				{
				State = 72;
				createIndex();
				}
				break;
			case T__14:
				{
				State = 73;
				createTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__1);
			State = 77;
			Match(T__2);
			State = 78;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterDropQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitDropQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropQueryContext dropQuery() {
		DropQueryContext _localctx = new DropQueryContext(Context, State);
		EnterRule(_localctx, 6, RULE_dropQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(T__4);
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 81;
				index();
				}
				break;
			case T__14:
				{
				State = 82;
				table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 85;
				ifExists();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__1);
			State = 89;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddColumnContext addColumn() {
			return GetRuleContext<AddColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropColumnContext dropColumn() {
			return GetRuleContext<DropColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterColumnContext alterColumn() {
			return GetRuleContext<AlterColumnContext>(0);
		}
		public AlterQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterAlterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitAlterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterQueryContext alterQuery() {
		AlterQueryContext _localctx = new AlterQueryContext(Context, State);
		EnterRule(_localctx, 10, RULE_alterQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__5);
			State = 92;
			table();
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				State = 93;
				addColumn();
				}
				break;
			case T__4:
				{
				State = 94;
				dropColumn();
				}
				break;
			case T__5:
				{
				State = 95;
				alterColumn();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainColumnsOnTableContext explainColumnsOnTable() {
			return GetRuleContext<ExplainColumnsOnTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainIndicesOnTableContext explainIndicesOnTable() {
			return GetRuleContext<ExplainIndicesOnTableContext>(0);
		}
		public ExplainQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterExplainQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitExplainQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainQueryContext explainQuery() {
		ExplainQueryContext _localctx = new ExplainQueryContext(Context, State);
		EnterRule(_localctx, 12, RULE_explainQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__6);
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 99;
				index();
				}
				break;
			case T__7:
			case T__14:
				{
				State = 100;
				explainColumnsOnTable();
				}
				break;
			case T__9:
				{
				State = 101;
				explainIndicesOnTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainColumnsOnTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public ExplainColumnsOnTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainColumnsOnTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterExplainColumnsOnTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitExplainColumnsOnTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainColumnsOnTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainColumnsOnTableContext explainColumnsOnTable() {
		ExplainColumnsOnTableContext _localctx = new ExplainColumnsOnTableContext(Context, State);
		EnterRule(_localctx, 14, RULE_explainColumnsOnTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 104;
				Match(T__7);
				State = 105;
				Match(T__8);
				}
			}

			State = 108;
			table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainIndicesOnTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public ExplainIndicesOnTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainIndicesOnTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterExplainIndicesOnTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitExplainIndicesOnTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainIndicesOnTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainIndicesOnTableContext explainIndicesOnTable() {
		ExplainIndicesOnTableContext _localctx = new ExplainIndicesOnTableContext(Context, State);
		EnterRule(_localctx, 16, RULE_explainIndicesOnTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(T__9);
			State = 111;
			Match(T__8);
			State = 112;
			table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public TruncateQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterTruncateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitTruncateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateQueryContext truncateQuery() {
		TruncateQueryContext _localctx = new TruncateQueryContext(Context, State);
		EnterRule(_localctx, 18, RULE_truncateQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__10);
			State = 115;
			table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnContext indexColumn() {
			return GetRuleContext<IndexColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniqueConstraintContext uniqueConstraint() {
			return GetRuleContext<UniqueConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 20, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 117;
				uniqueConstraint();
				}
			}

			State = 120;
			index();
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 121;
				ifNotExists();
				}
			}

			State = 124;
			Match(T__11);
			State = 125;
			indexColumn();
			State = 126;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IToken indexIdentifier;
		public IToken tableIdentifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RaccoonSQLParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RaccoonSQLParser.Identifier, i);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 22, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__13);
			State = 129;
			_localctx.indexIdentifier = Match(Identifier);
			State = 130;
			Match(T__8);
			State = 131;
			Match(T__14);
			State = 132;
			_localctx.tableIdentifier = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnContext : ParserRuleContext {
		public IToken columnName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RaccoonSQLParser.Identifier, 0); }
		public IndexColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterIndexColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitIndexColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnContext indexColumn() {
		IndexColumnContext _localctx = new IndexColumnContext(Context, State);
		EnterRule(_localctx, 24, RULE_indexColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_localctx.columnName = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableColumnsContext tableColumns() {
			return GetRuleContext<TableColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 26, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			table();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 137;
				ifNotExists();
				}
			}

			State = 140;
			Match(T__11);
			State = 141;
			tableColumns();
			State = 142;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public IToken tableName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RaccoonSQLParser.Identifier, 0); }
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 28, RULE_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__14);
			State = 145;
			_localctx.tableName = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableColumnContext[] tableColumn() {
			return GetRuleContexts<TableColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableColumnContext tableColumn(int i) {
			return GetRuleContext<TableColumnContext>(i);
		}
		public TableColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableColumns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterTableColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitTableColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableColumnsContext tableColumns() {
		TableColumnsContext _localctx = new TableColumnsContext(Context, State);
		EnterRule(_localctx, 30, RULE_tableColumns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			tableColumn();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 148;
				Match(T__15);
				State = 149;
				tableColumn();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableColumnContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RaccoonSQLParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RaccoonSQLParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public TableColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterTableColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitTableColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableColumnContext tableColumn() {
		TableColumnContext _localctx = new TableColumnContext(Context, State);
		EnterRule(_localctx, 32, RULE_tableColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_localctx.name = Match(Identifier);
			State = 156;
			_localctx.type = Match(Identifier);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__16) | (1L << T__18) | (1L << T__19) | (1L << T__21))) != 0)) {
				{
				{
				State = 157;
				columnConstraint();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotNullConstraintContext notNullConstraint() {
			return GetRuleContext<NotNullConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniqueConstraintContext uniqueConstraint() {
			return GetRuleContext<UniqueConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryKeyConstraintContext primaryKeyConstraint() {
			return GetRuleContext<PrimaryKeyConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeignKeyConstraintContext foreignKeyConstraint() {
			return GetRuleContext<ForeignKeyConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AutoValueContext autoValue() {
			return GetRuleContext<AutoValueContext>(0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 34, RULE_columnConstraint);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				notNullConstraint();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				uniqueConstraint();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				primaryKeyConstraint();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				foreignKeyConstraint();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				autoValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AutoValueContext : ParserRuleContext {
		public AutoValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autoValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterAutoValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitAutoValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AutoValueContext autoValue() {
		AutoValueContext _localctx = new AutoValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_autoValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotNullConstraintContext : ParserRuleContext {
		public NotNullConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notNullConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterNotNullConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitNotNullConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotNullConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotNullConstraintContext notNullConstraint() {
		NotNullConstraintContext _localctx = new NotNullConstraintContext(Context, State);
		EnterRule(_localctx, 38, RULE_notNullConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__2);
			State = 173;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueConstraintContext : ParserRuleContext {
		public UniqueConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterUniqueConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitUniqueConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniqueConstraintContext uniqueConstraint() {
		UniqueConstraintContext _localctx = new UniqueConstraintContext(Context, State);
		EnterRule(_localctx, 40, RULE_uniqueConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryKeyConstraintContext : ParserRuleContext {
		public PrimaryKeyConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryKeyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryKeyConstraintContext primaryKeyConstraint() {
		PrimaryKeyConstraintContext _localctx = new PrimaryKeyConstraintContext(Context, State);
		EnterRule(_localctx, 42, RULE_primaryKeyConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T__19);
			State = 178;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignKeyConstraintContext : ParserRuleContext {
		public IToken tableName;
		public IToken columnName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RaccoonSQLParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RaccoonSQLParser.Identifier, i);
		}
		public ForeignKeyConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignKeyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterForeignKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitForeignKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignKeyConstraintContext foreignKeyConstraint() {
		ForeignKeyConstraintContext _localctx = new ForeignKeyConstraintContext(Context, State);
		EnterRule(_localctx, 44, RULE_foreignKeyConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__21);
			State = 181;
			Match(T__20);
			State = 182;
			Match(T__22);
			State = 183;
			_localctx.tableName = Match(Identifier);
			State = 184;
			Match(T__11);
			State = 185;
			_localctx.columnName = Match(Identifier);
			State = 186;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableColumnContext tableColumn() {
			return GetRuleContext<TableColumnContext>(0);
		}
		public AddColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddColumnContext addColumn() {
		AddColumnContext _localctx = new AddColumnContext(Context, State);
		EnterRule(_localctx, 46, RULE_addColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__23);
			State = 189;
			tableColumn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropColumnContext : ParserRuleContext {
		public IToken columnName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RaccoonSQLParser.Identifier, 0); }
		public DropColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropColumnContext dropColumn() {
		DropColumnContext _localctx = new DropColumnContext(Context, State);
		EnterRule(_localctx, 48, RULE_dropColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__4);
			State = 192;
			_localctx.columnName = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableColumnContext tableColumn() {
			return GetRuleContext<TableColumnContext>(0);
		}
		public AlterColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterAlterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitAlterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterColumnContext alterColumn() {
		AlterColumnContext _localctx = new AlterColumnContext(Context, State);
		EnterRule(_localctx, 50, RULE_alterColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__5);
			State = 195;
			tableColumn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterSelectQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitSelectQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(Context, State);
		EnterRule(_localctx, 52, RULE_selectQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateQueryContext : ParserRuleContext {
		public UpdateQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterUpdateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitUpdateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateQueryContext updateQuery() {
		UpdateQueryContext _localctx = new UpdateQueryContext(Context, State);
		EnterRule(_localctx, 54, RULE_updateQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteQueryContext : ParserRuleContext {
		public DeleteQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterDeleteQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitDeleteQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteQueryContext deleteQuery() {
		DeleteQueryContext _localctx = new DeleteQueryContext(Context, State);
		EnterRule(_localctx, 56, RULE_deleteQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertQueryContext : ParserRuleContext {
		public InsertQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.EnterInsertQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRaccoonSQLListener typedListener = listener as IRaccoonSQLListener;
			if (typedListener != null) typedListener.ExitInsertQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRaccoonSQLVisitor<TResult> typedVisitor = visitor as IRaccoonSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertQueryContext insertQuery() {
		InsertQueryContext _localctx = new InsertQueryContext(Context, State);
		EnterRule(_localctx, 58, RULE_insertQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__27);
			State = 204;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xD1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'H', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'M', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x63', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'i', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'm', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x5', '\f', 'y', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'}', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x8D', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x99', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x9C', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xA1', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xA4', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xAB', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x2', '\x2', ' ', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '\x2', '\x2', '\x2', '\xCB', '\x2', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'I', '\x3', '\x2', '\x2', '\x2', '\x6', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'R', '\x3', '\x2', '\x2', '\x2', '\n', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\f', ']', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x10', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'p', '\x3', '\x2', '\x2', '\x2', '\x14', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'x', '\x3', '\x2', '\x2', '\x2', '\x18', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x92', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x95', '\x3', '\x2', '\x2', '\x2', '\"', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xAA', '\x3', '\x2', '\x2', '\x2', '&', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xAE', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', ',', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x30', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\x36', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\xC9', '\x3', '\x2', '\x2', '\x2', ':', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '<', '\xCD', '\x3', '\x2', '\x2', '\x2', '>', 'H', 
		'\x5', '\x4', '\x3', '\x2', '?', 'H', '\x5', '\b', '\x5', '\x2', '@', 
		'H', '\x5', '\f', '\a', '\x2', '\x41', 'H', '\x5', '\xE', '\b', '\x2', 
		'\x42', 'H', '\x5', '\x14', '\v', '\x2', '\x43', 'H', '\x5', '\x36', '\x1C', 
		'\x2', '\x44', 'H', '\x5', '\x38', '\x1D', '\x2', '\x45', 'H', '\x5', 
		':', '\x1E', '\x2', '\x46', 'H', '\x5', '<', '\x1F', '\x2', 'G', '>', 
		'\x3', '\x2', '\x2', '\x2', 'G', '?', '\x3', '\x2', '\x2', '\x2', 'G', 
		'@', '\x3', '\x2', '\x2', '\x2', 'G', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'G', '\x42', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'L', '\a', '\x3', '\x2', '\x2', 'J', 'M', '\x5', 
		'\x16', '\f', '\x2', 'K', 'M', '\x5', '\x1C', '\xF', '\x2', 'L', 'J', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 
		'\x5', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x4', '\x2', '\x2', 
		'O', 'P', '\a', '\x5', '\x2', '\x2', 'P', 'Q', '\a', '\x6', '\x2', '\x2', 
		'Q', '\a', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\a', '\a', '\x2', '\x2', 
		'S', 'V', '\x5', '\x18', '\r', '\x2', 'T', 'V', '\x5', '\x1E', '\x10', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x5', '\n', '\x6', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '\t', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x4', '\x2', 
		'\x2', '[', '\\', '\a', '\x6', '\x2', '\x2', '\\', '\v', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\a', '\b', '\x2', '\x2', '^', '\x62', '\x5', 
		'\x1E', '\x10', '\x2', '_', '\x63', '\x5', '\x30', '\x19', '\x2', '`', 
		'\x63', '\x5', '\x32', '\x1A', '\x2', '\x61', '\x63', '\x5', '\x34', '\x1B', 
		'\x2', '\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x64', 'h', '\a', '\t', '\x2', '\x2', '\x65', 
		'i', '\x5', '\x18', '\r', '\x2', '\x66', 'i', '\x5', '\x10', '\t', '\x2', 
		'g', 'i', '\x5', '\x12', '\n', '\x2', 'h', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\xF', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'\n', '\x2', '\x2', 'k', 'm', '\a', '\v', '\x2', '\x2', 'l', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x1E', '\x10', '\x2', 'o', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\f', '\x2', '\x2', 'q', 'r', 
		'\a', '\v', '\x2', '\x2', 'r', 's', '\x5', '\x1E', '\x10', '\x2', 's', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\r', '\x2', '\x2', 
		'u', 'v', '\x5', '\x1E', '\x10', '\x2', 'v', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'y', '\x5', '*', '\x16', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\x5', '\x18', '\r', '\x2', '{', '}', '\x5', '\x6', '\x4', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\xE', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\x1A', '\xE', '\x2', '\x80', '\x81', 
		'\a', '\xF', '\x2', '\x2', '\x81', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x10', '\x2', '\x2', '\x83', '\x84', '\a', ' ', 
		'\x2', '\x2', '\x84', '\x85', '\a', '\v', '\x2', '\x2', '\x85', '\x86', 
		'\a', '\x11', '\x2', '\x2', '\x86', '\x87', '\a', ' ', '\x2', '\x2', '\x87', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', ' ', '\x2', 
		'\x2', '\x89', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', 
		'\x1E', '\x10', '\x2', '\x8B', '\x8D', '\x5', '\x6', '\x4', '\x2', '\x8C', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', 
		'\xE', '\x2', '\x2', '\x8F', '\x90', '\x5', ' ', '\x11', '\x2', '\x90', 
		'\x91', '\a', '\xF', '\x2', '\x2', '\x91', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x11', '\x2', '\x2', '\x93', '\x94', '\a', 
		' ', '\x2', '\x2', '\x94', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x9A', '\x5', '\"', '\x12', '\x2', '\x96', '\x97', '\a', '\x12', '\x2', 
		'\x2', '\x97', '\x99', '\x5', '\"', '\x12', '\x2', '\x98', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '!', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', ' ', '\x2', '\x2', '\x9E', 
		'\xA2', '\a', ' ', '\x2', '\x2', '\x9F', '\xA1', '\x5', '$', '\x13', '\x2', 
		'\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '#', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xAB', '\x5', '(', '\x15', 
		'\x2', '\xA6', '\xAB', '\x5', '*', '\x16', '\x2', '\xA7', '\xAB', '\x5', 
		',', '\x17', '\x2', '\xA8', '\xAB', '\x5', '.', '\x18', '\x2', '\xA9', 
		'\xAB', '\x5', '&', '\x14', '\x2', '\xAA', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x13', '\x2', '\x2', '\xAD', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x5', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\x14', '\x2', '\x2', '\xB0', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\a', '\x15', '\x2', '\x2', '\xB2', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x16', '\x2', '\x2', '\xB4', 
		'\xB5', '\a', '\x17', '\x2', '\x2', '\xB5', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x18', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\x17', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x19', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', ' ', '\x2', '\x2', '\xBA', '\xBB', '\a', '\xE', '\x2', '\x2', 
		'\xBB', '\xBC', '\a', ' ', '\x2', '\x2', '\xBC', '\xBD', '\a', '\xF', 
		'\x2', '\x2', '\xBD', '/', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\a', '\x1A', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\"', '\x12', '\x2', 
		'\xC0', '\x31', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\a', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', ' ', '\x2', '\x2', '\xC3', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\b', '\x2', '\x2', 
		'\xC5', '\xC6', '\x5', '\"', '\x12', '\x2', '\xC6', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\a', '\x1B', '\x2', '\x2', '\xC8', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x1C', '\x2', '\x2', 
		'\xCA', '\x39', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1D', 
		'\x2', '\x2', '\xCC', ';', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\x1E', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x1F', '\x2', '\x2', 
		'\xCF', '=', '\x3', '\x2', '\x2', '\x2', '\xF', 'G', 'L', 'U', 'X', '\x62', 
		'h', 'l', 'x', '|', '\x8C', '\x9A', '\xA2', '\xAA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
